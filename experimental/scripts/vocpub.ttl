PREFIX dcat: <http://www.w3.org/ns/dcat#>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX reg: <http://purl.org/linked-data/registry#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX sdo: <https://schema.org/>
PREFIX sh: <http://www.w3.org/ns/shacl#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
BASE <https://w3id.org/profile/vocpub/validator/>


<https://w3id.org/profile/vocpub/validator>
    a owl:Ontology ;
    skos:prefLabel "VocPub Validator"@en ;
    skos:definition "SHACL validator for the VocPub Profile"@en ;
    dcterms:creator <https://orcid.org/0000-0002-8742-7730> ;
    dcterms:publisher <https://linked.data.gov.au/org/agldwg> ;
    dcterms:created "2020-06-14"^^xsd:date ;
    dcterms:modified "2023-02-24"^^xsd:date ;
    owl:versionIRI <https://w3id.org/profile/vocpub/validator/3.0> ;
    owl:versionInfo "3.0: Removed Requirement-2.3.5 (identifiers) as these are auto-generated in systems like VocPrez; Added Requirement-2.1.10 & 2.1.11 and sub parts to test for qualifiedDerivation and status of a ConceptScheme" ;
.

<https://linked.data.gov.au/org/agldwg> a sdo:Organization ;
    sdo:name "Australian Government Linked Data Working Group" ;
    sdo:url "https://www.linked.data.gov.au"^^xsd:anyURI ;
.

<https://orcid.org/0000-0002-8742-7730> a sdo:Person ;
    sdo:name "Nicholas J. Car" ;
    sdo:email "nicholas.car@anu.edu.au"^^xsd:anyURI ;
    sdo:identifier "https://orcid.org/0000-0002-8742-7730"^^xsd:anyURI ;
.

#
#   ConceptScheme
#
# Requirement-2.1.1 so far un-implemented in SHACL

# Requirement-2.1.2 included below

<Requirement-2.1.2+3>
    a sh:NodeShape ;
    sh:targetNode skos:ConceptScheme ;
    sh:property [
        sh:path [ sh:inversePath rdf:type ] ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Requirement 2.1.2 Each vocabulary _MUST_ be presented as a single skos:ConceptScheme object & Requirment 2.1.3 Each vocabulary MUST be presented in a single file which does not contain information other than that which is directly part of the vocabulary and the file is considered the point-of-truth" ;
    ] ;
.

<Requirement-2.1.4a>
	a sh:NodeShape ;
	sh:targetClass skos:ConceptScheme ;
        sh:message "Requirement 2.1.4 Each vocabulary _MUST_ have one and only one title, a text literal, indicated using the skos:prefLabel predicate" ;
        sh:property [
        sh:path skos:prefLabel ;
        sh:minCount 1 ;
        sh:uniqueLang true ;
        sh:or ( [ sh:datatype xsd:string ] [ sh:datatype rdf:langString ] ) ;
    ]
.

<Requirement-2.1.4b>
	a sh:NodeShape ;
	sh:targetClass skos:ConceptScheme ;
        sh:message "Requirement 2.1.4 Each vocabulary _MUST_ have one and only one definition, a text literal text, indicated using the skos:definition predicate" ;
        sh:property [
        sh:path skos:definition ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or ( [ sh:datatype xsd:string ] [ sh:datatype rdf:langString ] ) ;
    ]
.

<Requirement-2.1.5>
	a sh:NodeShape ;
	sh:targetClass skos:ConceptScheme ;
        sh:property [
        sh:path dcterms:created ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [
                sh:datatype xsd:dateTime ;
            ]
            [
                sh:datatype xsd:date ;
            ]
            [
                sh:datatype xsd:dateTimeStamp ;
            ]
        ) ;
        sh:message "Requirement 2.1.5 Each vocabulary _MUST_ have one and only one created date indicated using the dcterms:created predicate that must be either an `xsd:date`, `xsd:dateTime` or `xsd:dateTimeStamp` literal value" ;
    ] ;
    sh:property [
        sh:path dcterms:modified ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or (
            [
                sh:datatype xsd:dateTime ;
            ]
            [
                sh:datatype xsd:date ;
            ]
            [
                sh:datatype xsd:dateTimeStamp ;
            ]
        ) ;
        sh:message "Requirement 2.1.5 Each vocabulary _MUST_ have one and only one modified date indicated using the dcterms:modified predicate that must be either an `xsd:date`, `xsd:dateTime or `xsd:dateTimeStamp` literal value" ;
    ] ;
.

<Requirement-2.1.6a>
	a sh:NodeShape ;
	sh:property [
	    sh:path dcterms:creator ;
            sh:minCount 1 ;
	    sh:description "Requirement 2.1.6 Each creator agent associated with a vocabulary _MUST_ be typed as an `sdo:Person`, `sdo:Organization` or `sdo:GovernmentOrganization`" ;
	    sh:or (
	        [ sh:class sdo:GovernmentOrganization ]
		[ sh:class sdo:Organization ]
		[ sh:class sdo:Person ]
	    ) ;
	] ;
.

<Requirement-2.1.6b>
	a sh:NodeShape ;
	sh:property [
	    sh:path dcterms:publisher ;
            sh:minCount 1 ;
	    sh:description "Requirement 2.1.6 Each publisher agent associated with a vocabulary _MUST_ be typed as an sdo:Person, sdo:Organization or sdo:GovernmentOrganization" ;
            sh:or (
                [ sh:class sdo:GovernmentOrganization ]
                [ sh:class sdo:Organization ]
                [ sh:class sdo:Person ]
            ) ;
	] ;
.

<Requirement-2.1.7a>
    a sh:NodeShape ;
    sh:message "Requirement 2.1.7 Provenance for a ConceptScheme _MUST_ be indicated by at least one of the following properties: dcterms:provenance, dcterms:source or prov:wasDerivedFrom." ;
    sh:or (
        [
            sh:minCount 1 ;
            sh:path prov:wasDerivedFrom ;
            sh:message "This is a message about prov:wasDerivedFrom" ;
        ]
        [
            sh:minCount 1 ;
            sh:path dcterms:source ;
            sh:message "This is a message about dcterms:source" ;
        ]
        [
            sh:minCount 1 ;
            sh:path dcterms:provenance ;
            sh:message "This is a message about dcterms:provenance" ;
        ]
    ) ;
    sh:targetClass skos:ConceptScheme ;
.

<Requirement-2.1.7b>
    a sh:NodeShape ;
    sh:targetSubjectsOf dcterms:provenance ;
    sh:property [
        a sh:PropertyShape ;
        sh:maxCount 1 ;
        sh:path dcterms:provenance ;
        sh:message "You _MUST NOT_ use dcterms:provenance predicate more than once on any object." ;
    ] ;
.

<Requirement-2.1.7c>
    a sh:NodeShape ;
    sh:targetSubjectsOf dcterms:source ;
    sh:property [
        a sh:PropertyShape ;
        sh:maxCount 1 ;
        sh:path dcterms:source ;
        sh:message "You _MUST NOT_ use dcterms:source predicate more than once on any object." ;
    ] ;
.

<Requirement-2.1.7d>
    a sh:NodeShape ;
    sh:targetSubjectsOf prov:wasDerivedFrom ;
    sh:property [
        a sh:PropertyShape ;
        sh:maxCount 1 ;
        sh:path prov:wasDerivedFrom ;
        sh:message "You _MUST NOT_ use prov:wasDerivedFrom predicate more than once on any object." ;
    ] ;
.

<Requirement-2.1.7e>
    a sh:NodeShape ;
    sh:targetSubjectsOf dcterms:source ;
    sh:property [
        a sh:PropertyShape ;
        sh:path dcterms:source ;
        sh:datatype xsd:anyURI ;
        sh:message "Whenever dcterms:source is used, it must be a datatype predicate indicating an object of type xsd:anyURI" ;
    ] ;
.

<Requirement-2.1.7f>
    a sh:NodeShape ;
    sh:targetSubjectsOf dcterms:provenance ;
    sh:property [
        a sh:PropertyShape ;
        sh:path dcterms:provenance ;
        sh:or ( [ sh:datatype xsd:string ] [ sh:datatype rdf:langString ] ) ;
        sh:message "Whenever dcterms:provenance is used, it must be a datatype predicate indicating an object of type xsd:string or rdf:LangString" ;
    ] ;
.

<Requirement-2.1.7g>
    a sh:NodeShape ;
    sh:targetSubjectsOf prov:wasDerivedFrom ;
    sh:property [
        a sh:PropertyShape ;
        sh:path prov:wasDerivedFrom ;
        sh:nodeKind sh:IRI ;
        sh:message "Whenever prov:wasDerivedFrom is used, it must be an object predicate indicating an IRI" ;
    ] ;
.


# Requirement-2.1.8 so far un-implemented in SHACL

<Requirement-2.1.9>
	a sh:NodeShape ;
	sh:targetClass skos:ConceptScheme ;
    sh:property [
        sh:path skos:hasTopConcept ;
        sh:minCount 1 ;
        sh:nodeKind sh:IRI ;
    ] ;
    sh:message "Requirement 2.1.9 Each vocabulary's skos:ConceptScheme _MUST_ link to at least one skos:Concept within the vocabulary as with the predicate skos:hasTopConcept" ;
.

<Requirement-2.1.10>
	a sh:NodeShape ;
	sh:targetClass skos:ConceptScheme ;
    sh:property [
        sh:path prov:qualifiedDerivation ;
        sh:nodeKind sh:BlankNodeOrIRI ;
    ] ;
    sh:message "Requirement 2.1.10 Each vocabulary's skos:ConceptScheme _MAY_ indicate a qualified derivation from another vocabulary" ;
.

<Requirement-2.1.10b>
	a sh:NodeShape ;
	sh:targetObjectsOf prov:qualifiedDerivation ;
    sh:property [
        sh:path prov:entity ;
        sh:nodeKind sh:IRI ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:message "Requirement 2.1.10b IF a skos:ConceptScheme indicates that it is derived from another object via use of the prov:qualifiedDerivation predicate, it must then indicate a prov:Entity for that derivation by use of the predicate prov:entity" ;
.

<Requirement-2.1.10c>
	a sh:NodeShape ;
	sh:targetObjectsOf prov:qualifiedDerivation ;
    sh:property [
        sh:path prov:hadRole ;
        sh:nodeKind sh:IRI ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:message "Requirement 2.1.10c IF a skos:ConceptScheme indicates that it is derived from another object via use of the prov:qualifiedDerivation predicate, it must then indicate a role for the derivation by use of the predicate prov:hadRole" ;
.

<Requirement-2.1.11>
	a sh:NodeShape ;
	sh:targetClass skos:ConceptScheme ;
    sh:property [
        sh:path reg:status ;
        sh:nodeKind sh:IRI ;
    ] ;
    sh:message "Requirement 2.1.11 Each vocabulary's skos:ConceptScheme _MAY_ indicate a status with respect to its existence in a register and, if it does it MUST do so by referencing an IRI for a skos:Concept with the reg:status predicate" ;
.

#
#   Collections
#
<Requirement-2.2.1a>
	a sh:NodeShape ;
	sh:targetClass skos:Collection ;
    sh:message "Requirement 2.2.1 Each skos:Collection instance _MUST_ have one and only one title indicated using the skos:prefLabel predicate that must be a text literal value" ;
    sh:property [
        sh:path skos:prefLabel ;
        sh:minCount 1 ;
        sh:uniqueLang true ;
        sh:or ( [ sh:datatype xsd:string ] [ sh:datatype rdf:langString ] ) ;
    ]
.

<Requirement-2.2.1b>
	a sh:NodeShape ;
	sh:targetClass skos:Collection ;
    sh:message "Requirement 2.2.1 Each skos:Collection instance _MUST_ have one and only one definition indicated using the skos:definition predicate that must be a text literal value" ;
    sh:property [
        sh:path skos:definition ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or ( [ sh:datatype xsd:string ] [ sh:datatype rdf:langString ] ) ;
    ]
.

<Requirement-2.2.2>
    a sh:NodeShape ;
    sh:message "Requirement 2.1.7 Provenance for a Collection _SHOULD_ be indicated by at least one of the following properties: dcterms:provenance, dcterms:source or prov:wasDerivedFrom." ;
    sh:or (
        [
            sh:minCount 1 ;
            sh:path prov:wasDerivedFrom ;
            sh:message "This is a message about prov:wasDerivedFrom" ;
        ]
        [
            sh:minCount 1 ;
            sh:path dcterms:source ;
            sh:message "This is a message about dcterms:source" ;
        ]
        [
            sh:minCount 1 ;
            sh:path dcterms:provenance ;
            sh:message "This is a message about dcterms:provenance" ;
        ]
    ) ;
    sh:targetClass skos:Collection ;
    sh:severity sh:Warning ;
.

#
#   Concept
#
<Requirement-2.3.1a>
	a sh:NodeShape ;
	sh:targetClass skos:Concept ;
    sh:message "Requirement 2.3.1 Each skos:Concept instance _MUST_ have one and only one title indicated using the `skos:prefLabel` predicate that must be a text literal value" ;
    sh:property [
        sh:path skos:prefLabel ;
        sh:minCount 1 ;
        sh:uniqueLang true ;
        sh:or ( [ sh:datatype xsd:string ] [ sh:datatype rdf:langString ] ) ;
    ]
.

<Requirement-2.3.1b>
	a sh:NodeShape ;
	sh:targetClass skos:Concept ;
    sh:message "Requirement 2.3.1 Each skos:Concept instance _MUST_ have one and only one definition indicated using the `skos:definition` predicate that must be a text literal value" ;
    sh:property [
        sh:path skos:definition ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:or ( [ sh:datatype xsd:string ] [ sh:datatype rdf:langString ] ) ;
    ]
.

<Requirement-2.3.2>
	a sh:NodeShape ;
	sh:targetClass skos:Concept ;
    sh:message "Requirement 2.3.2 Each skos:Concept in a vocabulary _MAY_ indicate the vocabulary that defines it by use of the `rdfs:isDefinedBy` predicate indicating a `skos:ConceptScheme` instance" ;
    sh:property [
        sh:path rdfs:isDefinedBy ;
        sh:minCount 0 ;
        sh:maxCount 1 ;
        sh:nodeKind sh:IRI ;
    ]
.

<Requirement-2.3.3>
	a sh:NodeShape ;
	sh:targetClass skos:Concept ;
        sh:or (
            [
                sh:property [
                sh:path skos:inScheme ;
                sh:minCount 1 ;
                sh:class skos:ConceptScheme ;
            ] ;
        ]
        [
            sh:property [
                sh:path skos:topConceptOf ;
                sh:minCount 1 ;
                sh:class skos:ConceptScheme ;
            ] ;
        ]
    ) ;
    sh:message "Requirement 2.3.3 Each skos:Concept in a vocabulary _MUST_ indicate that it appears within that vocabulary's hierarchy of terms by use of either or both `skos:inScheme` and `skos:topConceptOf` properties" ;
.

<Requirement-2.3.4>
    a sh:NodeShape ;
    sh:message "Requirement 2.1.7 Provenance for a Concept _SHOULD_ be indicated by at least one of the following properties: dcterms:provenance, dcterms:source or prov:wasDerivedFrom." ;
    sh:or (
        [
            sh:minCount 1 ;
            sh:path prov:wasDerivedFrom ;
            sh:message "This is a message about prov:wasDerivedFrom" ;
        ]
        [
            sh:minCount 1 ;
            sh:path dcterms:source ;
            sh:message "This is a message about dcterms:source" ;
        ]
        [
            sh:minCount 1 ;
            sh:path dcterms:provenance ;
            sh:message "This is a message about dcterms:provenance" ;
        ]
    ) ;
    sh:targetClass skos:Concept ;
    sh:severity sh:Warning ;
.

#
#   Agent
#
# Requirement 2.4.1 is tested by the shape for Requirement 2.1.6a & 2.1.6b

<Requirement-2.4.1>
	a sh:NodeShape ;
	sh:targetClass sdo:Organization , sdo:Person ;
        sh:property [
            sh:path sdo:name ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            sh:datatype xsd:string ;
            sh:message "Requirement 2.4.2 Each agent _MUST_ indicate at least one name predicate with the `sdo:name` predicate that must be a text literal value"
        ] ;
.

<Requirement-2.4.3a>
	a sh:NodeShape ;
	sh:targetClass sdo:Organization ;
        sh:property [
            sh:path sdo:url ;
            sh:minCount 1 ;
            sh:datatype xsd:anyURI ;
        ] ;
        sh:message "Requirement 2.4.3 Each agent _MUST_ indicate either a `sdo:url` (for organizations) or a `sdo:email` (for people) predicate with a URL or email value"
.

<Requirement-2.4.3b>
	a sh:NodeShape ;
	sh:targetClass sdo:Person ;
        sh:property [
            sh:path sdo:email ;
            sh:minCount 1 ;
            sh:datatype xsd:anyURI ;
        ] ;
        sh:message "Requirement 2.4.3 Each agent _MUST_ indicate either a sdo:url (for organizations) or a sdo:email (for people) predicate with a URL or email value"
.
